Index: app/src/main/java/com/example/projeto2cm/fragments/MessageFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.projeto2cm.fragments\r\n\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.EditText\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.projeto2cm.R\r\nimport com.example.projeto2cm.entities.User\r\nimport com.example.projeto2cm.adapters.UserAdapter\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\n\r\nclass MessageFragment : Fragment() {\r\n\r\n    private var userAdapter: UserAdapter? = null\r\n    private var mUser: List<User>? = null\r\n    private var recyclerView: RecyclerView? = null\r\n    private var searchUserField: EditText? = null\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_message, container, false)\r\n\r\n        recyclerView = view.findViewById(R.id.search_list)\r\n        recyclerView!!.setHasFixedSize(true)\r\n        recyclerView!!.layoutManager = LinearLayoutManager(context)\r\n        searchUserField = view.findViewById(R.id.search_user_field)\r\n\r\n        mUser = ArrayList()\r\n        //getAllUsers()\r\n\r\n        searchUserField?.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                searchForUser(s.toString().toLowerCase())\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n            }\r\n        })\r\n\r\n        return view\r\n    }\r\n\r\n    private fun getAllUsers() {\r\n        val firebaseUserID = FirebaseAuth.getInstance().currentUser?.uid\r\n        val refUser = FirebaseDatabase.getInstance().reference.child(\"Users\")\r\n        refUser.addValueEventListener(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                (mUser as ArrayList<User>).clear()\r\n                if (searchUserField!!.text.toString() == \"\") {\r\n                    for (i in snapshot.children) {\r\n                        val user: User? = i.getValue(User::class.java)\r\n                        if (!(user!!.getUID()).equals(firebaseUserID)) {\r\n                            (mUser as ArrayList<User>).add(user)\r\n                        }\r\n                    }\r\n                    userAdapter = UserAdapter(context!!, mUser!!, false)\r\n                    recyclerView!!.adapter = userAdapter\r\n                }\r\n\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                TODO(\"Not yet implemented\")\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    private fun searchForUser(str: String) {\r\n        val firebaseUserID = FirebaseAuth.getInstance().currentUser?.uid\r\n        val queryUser =\r\n            FirebaseDatabase.getInstance().reference\r\n                .child(\"Users\")\r\n                .orderByChild(\"searchUser\")\r\n                .startAt(str)\r\n                .endAt(str + \"\\uf8ff\")\r\n        queryUser.addValueEventListener(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                (mUser as ArrayList<User>).clear()\r\n                if (searchUserField!!.text.toString() != \"\") {\r\n                    for (i in snapshot.children) {\r\n                        val user: User? = i.getValue(User::class.java)\r\n                        if (!(user!!.getUID()).equals(firebaseUserID)) {\r\n                            (mUser as ArrayList<User>).add(user)\r\n                            user.getEmail()?.let { Log.e(\"sdfgsf\", it) }\r\n                        }\r\n                    }\r\n                    userAdapter = UserAdapter(context!!, mUser!!, false)\r\n                    recyclerView!!.adapter = userAdapter\r\n                } else {\r\n                    (mUser as ArrayList<User>).clear()\r\n                    userAdapter = UserAdapter(context!!, mUser!!, false)\r\n                    recyclerView!!.adapter = userAdapter\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                TODO(\"Not yet implemented\")\r\n            }\r\n        })\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/projeto2cm/fragments/MessageFragment.kt	(revision 92fe052b1137c819f3d9888063a03de38f58afdb)
+++ app/src/main/java/com/example/projeto2cm/fragments/MessageFragment.kt	(date 1608141995966)
@@ -15,6 +15,7 @@
 import com.example.projeto2cm.entities.User
 import com.example.projeto2cm.adapters.UserAdapter
 import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.auth.FirebaseUser
 import com.google.firebase.database.DataSnapshot
 import com.google.firebase.database.DatabaseError
 import com.google.firebase.database.FirebaseDatabase
Index: app/src/main/java/com/example/projeto2cm/activities/ChatActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.projeto2cm.activities\r\n\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.EditText\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.projeto2cm.R\r\nimport com.example.projeto2cm.adapters.ChatAdapter\r\nimport com.example.projeto2cm.entities.Chat\r\nimport com.example.projeto2cm.entities.User\r\nimport com.google.android.gms.tasks.Continuation\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.StorageTask\r\nimport com.google.firebase.storage.UploadTask\r\nimport com.squareup.picasso.Picasso\r\n\r\nclass ChatActivity : AppCompatActivity() {\r\n\r\n    var userIdVisit: String = \"\"\r\n    var fireBaseUser: FirebaseUser? = null\r\n    var chatAdapter: ChatAdapter? = null\r\n    var mchatList: List<Chat>? = null\r\n\r\n    lateinit var recyclerViewChats: RecyclerView\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_chat)\r\n\r\n        intent = intent\r\n        userIdVisit = intent.getStringExtra(\"visit_id\").toString()\r\n        fireBaseUser = FirebaseAuth.getInstance().currentUser\r\n\r\n        recyclerViewChats = findViewById(R.id.recycler_view_chats)\r\n        recyclerViewChats.setHasFixedSize(true)\r\n        var linearLayoutManager = LinearLayoutManager(applicationContext)\r\n        linearLayoutManager.stackFromEnd = true\r\n        recyclerViewChats.layoutManager = linearLayoutManager\r\n\r\n        val reference = FirebaseDatabase.getInstance().reference\r\n            .child(\"Users\").child(userIdVisit)\r\n        reference.addValueEventListener(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val user: User? = snapshot.getValue(User::class.java)\r\n\r\n                val usernameChat = findViewById<TextView>(R.id.username_chat)\r\n                usernameChat.text = user!!.getName()\r\n                val profilePic = findViewById<ImageView>(R.id.profile_pic)\r\n                Picasso.get().load(user.getProfile()).into(profilePic)\r\n\r\n                getAllMessages(fireBaseUser!!.uid, userIdVisit, user.getProfile())\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                TODO(\"Not yet implemented\")\r\n            }\r\n        })\r\n\r\n        val sendMessageBtn = findViewById<ImageView>(R.id.send_message_btn)\r\n        val textMsg = findViewById<EditText>(R.id.text_message)\r\n\r\n        sendMessageBtn.setOnClickListener {\r\n            val msg = textMsg.text.toString()\r\n            if (msg == \"\") {\r\n                Toast.makeText(this, \"Por favor escreva uma mensagem: \", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                sendMessageToUser(fireBaseUser?.uid, userIdVisit, msg)\r\n                Log.e(\"dsfsdfsfsfsf\", \"$msg\")\r\n            }\r\n            textMsg.setText(\"\")\r\n        }\r\n\r\n        val attachFile = findViewById<ImageView>(R.id.attach_image_file_btn)\r\n\r\n        attachFile.setOnClickListener {\r\n            val intent = Intent()\r\n            intent.action = Intent.ACTION_GET_CONTENT\r\n            intent.type = \"image/*\"\r\n            startActivityForResult(Intent.createChooser(intent, \"Selecione uma Imagem\"), 438)\r\n        }\r\n    }\r\n\r\n    private fun getAllMessages(senderId: String, receiverId: String?, receiverImageUrl: String?) {\r\n        mchatList = ArrayList()\r\n        val reference = FirebaseDatabase.getInstance().reference.child(\"Chats\")\r\n\r\n        reference.addValueEventListener(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                (mchatList as ArrayList<Chat>).clear()\r\n                for (i in snapshot.children) {\r\n                    val chat = i.getValue(Chat::class.java)\r\n                    if (chat!!.getReceiver().equals(senderId) && chat.getSender()\r\n                            .equals(receiverId) || chat.getReceiver()\r\n                            .equals(receiverId) && chat.getSender().equals(senderId)\r\n                    ) {\r\n                        (mchatList as ArrayList<Chat>).add(chat)\r\n                    }\r\n                    chatAdapter = ChatAdapter(\r\n                        this@ChatActivity,\r\n                        (mchatList as ArrayList<Chat>),\r\n                        receiverImageUrl!!\r\n                    )\r\n                    recyclerViewChats.adapter = chatAdapter\r\n\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                TODO(\"Not yet implemented\")\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun sendMessageToUser(senderId: String?, receiverId: String?, msg: String) {\r\n        val reference = FirebaseDatabase.getInstance().reference\r\n        val msgKey = reference.push().key\r\n\r\n        val messageHashMap = HashMap<String, Any?>()\r\n        messageHashMap[\"sender\"] = senderId\r\n        messageHashMap[\"message\"] = msg\r\n        messageHashMap[\"receiver\"] = receiverId\r\n        messageHashMap[\"isseen\"] = false\r\n        messageHashMap[\"url\"] = \"\"\r\n        messageHashMap[\"messagerId\"] = msgKey\r\n\r\n        reference.child(\"Chats\")\r\n            .child(msgKey!!)\r\n            .setValue(messageHashMap)\r\n            .addOnCompleteListener { task ->\r\n                if (task.isSuccessful) {\r\n                    val chatsListReference = FirebaseDatabase.getInstance()\r\n                        .reference\r\n                        .child(\"ChatList\")\r\n                        .child(fireBaseUser!!.uid)\r\n                        .child(userIdVisit)\r\n\r\n                    //implement the push notifications using fcm\r\n                    chatsListReference.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                        override fun onDataChange(snapshot: DataSnapshot) {\r\n                            if (!snapshot.exists()) {\r\n                                chatsListReference.child(\"id\").setValue(userIdVisit)\r\n                            }\r\n                            val chatsListReceiverReference = FirebaseDatabase.getInstance()\r\n                                .reference\r\n                                .child(\"ChatList\")\r\n                                .child(userIdVisit)\r\n                                .child(fireBaseUser!!.uid)\r\n                            chatsListReceiverReference.child(\"id\").setValue(fireBaseUser!!.uid)\r\n                        }\r\n\r\n                        override fun onCancelled(error: DatabaseError) {\r\n                            TODO(\"Not yet implemented\")\r\n                        }\r\n                    })\r\n\r\n                    val reference = FirebaseDatabase.getInstance().reference\r\n                        .child(\"Users\").child(fireBaseUser!!.uid)\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (requestCode == 438 && resultCode == RESULT_OK && data != null && data!!.data != null) {\r\n            val loadingBar = ProgressDialog(this)\r\n            loadingBar.setMessage(\"Por favor espere, a enviar mensagem...\")\r\n            loadingBar.show()\r\n\r\n            val fileUri = data.data\r\n            val storageReference = FirebaseStorage.getInstance().reference.child(\"Chat Images\")\r\n            val ref = FirebaseDatabase.getInstance().reference\r\n            val msgPushId = ref.push().key\r\n            val filePath = storageReference.child(\"$msgPushId.jpg\")\r\n\r\n            var uploadTask: StorageTask<*>\r\n            uploadTask = filePath.putFile(fileUri!!)\r\n\r\n            uploadTask.continueWithTask(Continuation<UploadTask.TaskSnapshot, Task<Uri>> { task ->\r\n                if (!task.isSuccessful) {\r\n                    task.exception?.let {\r\n                        throw it\r\n                    }\r\n                }\r\n                return@Continuation filePath.downloadUrl\r\n            }).addOnCompleteListener { task ->\r\n                if (task.isSuccessful) {\r\n\r\n                    val downloadUrl = task.result\r\n                    val url = downloadUrl.toString()\r\n\r\n                    val messageHashMap = HashMap<String, Any?>()\r\n                    messageHashMap[\"sender\"] = fireBaseUser!!.uid\r\n                    messageHashMap[\"message\"] = \"enviei uma mensagem\"\r\n                    messageHashMap[\"receiver\"] = userIdVisit\r\n                    messageHashMap[\"isseen\"] = false\r\n                    messageHashMap[\"url\"] = url\r\n                    messageHashMap[\"messagerId\"] = msgPushId\r\n\r\n                    ref.child(\"Chats\").child(msgPushId!!).setValue(messageHashMap)\r\n\r\n                    loadingBar.dismiss()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/projeto2cm/activities/ChatActivity.kt	(revision 92fe052b1137c819f3d9888063a03de38f58afdb)
+++ app/src/main/java/com/example/projeto2cm/activities/ChatActivity.kt	(date 1608140346775)
@@ -116,10 +116,8 @@
                         receiverImageUrl!!
                     )
                     recyclerViewChats.adapter = chatAdapter
-
                 }
             }
-
             override fun onCancelled(error: DatabaseError) {
                 TODO("Not yet implemented")
             }
